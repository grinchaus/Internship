(defn binV [func] (fn [map1 map2] (mapv func map1 map2)))
(def v+ (binV +))
(def v- (binV -))
(def v* (binV *))
(def vd (binV /))
(defn v*s [vector, s] (mapv #(* % s) vector))
(defn scalar [vector1, vector2] (reduce + (v* vector1 vector2)))
(defn vect [vector1 vector2]
  [( - (* (nth vector1 1) (nth vector2 2))
       (* (nth vector1 2) (nth vector2 1)))
   ( - (* (nth vector1 2) (nth vector2 0))
       (* (nth vector1 0) (nth vector2 2)))
   ( - (* (nth vector1 0) (nth vector2 1))
       (* (nth vector1 1) (nth vector2 0)))])
(def m+ (binV v+))
(def m- (binV v-))
(def m* (binV v*))
(def md (binV vd))
(def c+ (binV m+))
(def c- (binV m-))
(def c* (binV m*))
(def cd (binV md))
(defn m*s [matrix, s] (mapv #(v*s % s) matrix))
(defn m*v [matrix vector] (mapv #(reduce + (v* % vector)) matrix))
(defn transpose [matrix] (apply mapv vector matrix))
(defn m*m [matrix1 matrix2] (mapv #(mapv (partial scalar %) (transpose matrix2)) matrix1))